
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  GOD
//  DateTime: 04.09.2016 11:50:33
//  UserName: Skap
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

//%union {
		//public double dVal;
		//public int iVal;
		//public string sVal;
		//public Node nVal;
		//public ExprNode eVal;
		//public StatementNode stVal;
		//public BlockNode blVal;
//}

//%using ProgramTree

%namespace SimpleParser

%token BEGIN END CYCLE INUM RNUM ID ASSIGN SEMICOLON LBRACE RBRACE PLUS MINUS MULT DIV VAR COMMA IF THEN ELSE WRITE FOR TO DO REPEAT UNTIL WHILE
%token <iVal> INUM
%token <dVal> RNUM
%token <sVal> ID

%type <eVal> expr ident
%type <stVal> assign statement cycle
%type <blVal> stlist block

%nonassoc IFX
%nonassoc ELSE

%%
// Warning: NonTerminal symbol "while_st" is unreachable
// -----------------------------------------------------


progr   : block
		;

stlist	: statement
		| stlist statement
		;

statement: assign SEMICOLON
		| block
		| cycle
		| var_id SEMICOLON
		| if_st
		| write_st SEMICOLON
		| for_st
		| rep_unt
		;

ident 	: ID
		;
	
assign 	: ident ASSIGN expr
		;

block	: BEGIN stlist END
		;

cycle	: CYCLE expr statement
		;

if_st   : IF expr THEN statement %prec IFX
		| IF expr THEN statement else_st
		;
		
else_st : ELSE statement
//		| ELSE block
		;

rep_unt : REPEAT stlist UNTIL expr
		;

while_st: WHILE expr DO statement
		;

write_st: WRITE LBRACE expr RBRACE
		;

for_st	: FOR assign TO expr DO statement
		;

expr	: m_d
		| expr PLUS m_d
		| expr MINUS m_d
		;

m_d		: in_br
		| m_d MULT in_br
		| m_d DIV in_br
		;

in_br	: ident
		| INUM
		| LBRACE expr RBRACE
		;

enum    : ident
		| assign
		| enum COMMA ident
		| enum COMMA assign
		;

var_id	: VAR enum
		;

%%
// ==========================================================================

