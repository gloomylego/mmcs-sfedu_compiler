// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  GOD
// DateTime: 08.09.2016 15:21:35
// UserName: Skap
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleLang;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,INUM=6,
    RNUM=7,ID=8,ASSIGN=9,SEMICOLON=10,LBRACE=11,RBRACE=12,
    PLUS=13,MINUS=14,MULT=15,DIV=16,VAR=17,COMMA=18,
    IF=19,THEN=20,ELSE=21,WRITE=22,FOR=23,TO=24,
    DO=25,REPEAT=26,UNTIL=27,WHILE=28,LS=29,GT=30,
    LE=31,GE=32,EQ=33,NE=34,IFX=35};

public struct ValueType
{
		public double dVal;
		public int iVal;
		public string sVal;
		public Node nVal;
		public ExprNode eVal;
		public StatementNode stVal;
		public BlockNode blVal;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Ёти объ€влени€ добавл€ютс€ в класс GPPGParser, представл€ющий собой парсер, генерируемый системой gppg
	public BlockNode root;
    public Parser(AbstractScanner<SimpleParser.ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[47];
  private static State[] states = new State[84];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "assign", "statement", "cycle", "stlist", "block", "progr", 
      "$accept", "var_id", "if_st", "write_st", "for_st", "rep_unt", "while_st", 
      "else_st", "bin_expr", "bin_sign", "m_d", "in_br", "enum", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-8,1,-7,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-6,5,-4,83,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[5] = new State(new int[]{4,6,8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-4,7,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[6] = new State(-16);
    states[7] = new State(-4);
    states[8] = new State(new int[]{10,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{9,11});
    states[11] = new State(new int[]{8,18,6,19,11,20},new int[]{-1,12,-19,28,-20,27,-2,17});
    states[12] = new State(new int[]{13,13,14,23,10,-15,18,-15,24,-15});
    states[13] = new State(new int[]{8,18,6,19,11,20},new int[]{-19,14,-20,27,-2,17});
    states[14] = new State(new int[]{15,15,16,25,13,-34,14,-34,10,-34,18,-34,24,-34,12,-34,8,-34,3,-34,5,-34,17,-34,19,-34,22,-34,23,-34,26,-34,28,-34,20,-34,25,-34,29,-34,30,-34,31,-34,32,-34,33,-34,34,-34,4,-34,21,-34,27,-34});
    states[15] = new State(new int[]{8,18,6,19,11,20},new int[]{-20,16,-2,17});
    states[16] = new State(-37);
    states[17] = new State(-39);
    states[18] = new State(-14);
    states[19] = new State(-40);
    states[20] = new State(new int[]{8,18,6,19,11,20},new int[]{-1,21,-19,28,-20,27,-2,17});
    states[21] = new State(new int[]{12,22,13,13,14,23});
    states[22] = new State(-41);
    states[23] = new State(new int[]{8,18,6,19,11,20},new int[]{-19,24,-20,27,-2,17});
    states[24] = new State(new int[]{15,15,16,25,13,-35,14,-35,10,-35,18,-35,24,-35,12,-35,8,-35,3,-35,5,-35,17,-35,19,-35,22,-35,23,-35,26,-35,28,-35,20,-35,25,-35,29,-35,30,-35,31,-35,32,-35,33,-35,34,-35,4,-35,21,-35,27,-35});
    states[25] = new State(new int[]{8,18,6,19,11,20},new int[]{-20,26,-2,17});
    states[26] = new State(-38);
    states[27] = new State(-36);
    states[28] = new State(new int[]{15,15,16,25,13,-33,14,-33,10,-33,18,-33,24,-33,12,-33,8,-33,3,-33,5,-33,17,-33,19,-33,22,-33,23,-33,26,-33,28,-33,20,-33,25,-33,29,-33,30,-33,31,-33,32,-33,33,-33,34,-33,4,-33,21,-33,27,-33});
    states[29] = new State(-6);
    states[30] = new State(-7);
    states[31] = new State(new int[]{8,18,6,19,11,20},new int[]{-1,32,-19,28,-20,27,-2,17});
    states[32] = new State(new int[]{13,13,14,23,8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-4,33,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[33] = new State(-17);
    states[34] = new State(new int[]{10,35});
    states[35] = new State(-8);
    states[36] = new State(new int[]{8,18},new int[]{-21,37,-2,41,-3,42});
    states[37] = new State(new int[]{18,38,10,-46});
    states[38] = new State(new int[]{8,18},new int[]{-2,39,-3,40});
    states[39] = new State(new int[]{9,11,18,-44,10,-44});
    states[40] = new State(-45);
    states[41] = new State(new int[]{9,11,18,-42,10,-42});
    states[42] = new State(-43);
    states[43] = new State(-9);
    states[44] = new State(new int[]{8,18,6,19,11,20},new int[]{-1,45,-19,28,-20,27,-2,17});
    states[45] = new State(new int[]{20,46,13,13,14,23});
    states[46] = new State(new int[]{8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-4,47,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[47] = new State(new int[]{21,49,4,-18,8,-18,3,-18,5,-18,17,-18,19,-18,22,-18,23,-18,26,-18,28,-18,27,-18},new int[]{-16,48});
    states[48] = new State(-19);
    states[49] = new State(new int[]{8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-4,50,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[50] = new State(-20);
    states[51] = new State(new int[]{10,52});
    states[52] = new State(-10);
    states[53] = new State(new int[]{11,54});
    states[54] = new State(new int[]{8,18,6,19,11,20},new int[]{-1,55,-19,28,-20,27,-2,17});
    states[55] = new State(new int[]{12,56,13,13,14,23});
    states[56] = new State(-23);
    states[57] = new State(-11);
    states[58] = new State(new int[]{8,18},new int[]{-3,59,-2,10});
    states[59] = new State(new int[]{24,60});
    states[60] = new State(new int[]{8,18,6,19,11,20},new int[]{-1,61,-19,28,-20,27,-2,17});
    states[61] = new State(new int[]{25,62,13,13,14,23});
    states[62] = new State(new int[]{8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-4,63,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[63] = new State(-24);
    states[64] = new State(-12);
    states[65] = new State(new int[]{8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-6,66,-4,83,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[66] = new State(new int[]{27,67,8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-4,7,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[67] = new State(new int[]{8,18,6,19,11,20},new int[]{-17,68,-1,77,-19,28,-20,27,-2,17});
    states[68] = new State(new int[]{29,71,30,72,31,73,32,74,33,75,34,76,4,-21,8,-21,3,-21,5,-21,17,-21,19,-21,22,-21,23,-21,26,-21,28,-21,21,-21,27,-21},new int[]{-18,69});
    states[69] = new State(new int[]{8,18,6,19,11,20},new int[]{-1,70,-19,28,-20,27,-2,17});
    states[70] = new State(new int[]{13,13,14,23,29,-32,30,-32,31,-32,32,-32,33,-32,34,-32,4,-32,8,-32,3,-32,5,-32,17,-32,19,-32,22,-32,23,-32,26,-32,28,-32,21,-32,27,-32,25,-32});
    states[71] = new State(-25);
    states[72] = new State(-26);
    states[73] = new State(-27);
    states[74] = new State(-28);
    states[75] = new State(-29);
    states[76] = new State(-30);
    states[77] = new State(new int[]{13,13,14,23,29,-31,30,-31,31,-31,32,-31,33,-31,34,-31,4,-31,8,-31,3,-31,5,-31,17,-31,19,-31,22,-31,23,-31,26,-31,28,-31,21,-31,27,-31,25,-31});
    states[78] = new State(-13);
    states[79] = new State(new int[]{8,18,6,19,11,20},new int[]{-17,80,-1,77,-19,28,-20,27,-2,17});
    states[80] = new State(new int[]{25,81,29,71,30,72,31,73,32,74,33,75,34,76},new int[]{-18,69});
    states[81] = new State(new int[]{8,18,3,4,5,31,17,36,19,44,22,53,23,58,26,65,28,79},new int[]{-4,82,-3,8,-2,10,-7,29,-5,30,-10,34,-11,43,-12,51,-13,57,-14,64,-15,78});
    states[82] = new State(-22);
    states[83] = new State(-3);

    rules[1] = new Rule(-9, new int[]{-8,2});
    rules[2] = new Rule(-8, new int[]{-7});
    rules[3] = new Rule(-6, new int[]{-4});
    rules[4] = new Rule(-6, new int[]{-6,-4});
    rules[5] = new Rule(-4, new int[]{-3,10});
    rules[6] = new Rule(-4, new int[]{-7});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-4, new int[]{-10,10});
    rules[9] = new Rule(-4, new int[]{-11});
    rules[10] = new Rule(-4, new int[]{-12,10});
    rules[11] = new Rule(-4, new int[]{-13});
    rules[12] = new Rule(-4, new int[]{-14});
    rules[13] = new Rule(-4, new int[]{-15});
    rules[14] = new Rule(-2, new int[]{8});
    rules[15] = new Rule(-3, new int[]{-2,9,-1});
    rules[16] = new Rule(-7, new int[]{3,-6,4});
    rules[17] = new Rule(-5, new int[]{5,-1,-4});
    rules[18] = new Rule(-11, new int[]{19,-1,20,-4});
    rules[19] = new Rule(-11, new int[]{19,-1,20,-4,-16});
    rules[20] = new Rule(-16, new int[]{21,-4});
    rules[21] = new Rule(-14, new int[]{26,-6,27,-17});
    rules[22] = new Rule(-15, new int[]{28,-17,25,-4});
    rules[23] = new Rule(-12, new int[]{22,11,-1,12});
    rules[24] = new Rule(-13, new int[]{23,-3,24,-1,25,-4});
    rules[25] = new Rule(-18, new int[]{29});
    rules[26] = new Rule(-18, new int[]{30});
    rules[27] = new Rule(-18, new int[]{31});
    rules[28] = new Rule(-18, new int[]{32});
    rules[29] = new Rule(-18, new int[]{33});
    rules[30] = new Rule(-18, new int[]{34});
    rules[31] = new Rule(-17, new int[]{-1});
    rules[32] = new Rule(-17, new int[]{-17,-18,-1});
    rules[33] = new Rule(-1, new int[]{-19});
    rules[34] = new Rule(-1, new int[]{-1,13,-19});
    rules[35] = new Rule(-1, new int[]{-1,14,-19});
    rules[36] = new Rule(-19, new int[]{-20});
    rules[37] = new Rule(-19, new int[]{-19,15,-20});
    rules[38] = new Rule(-19, new int[]{-19,16,-20});
    rules[39] = new Rule(-20, new int[]{-2});
    rules[40] = new Rule(-20, new int[]{6});
    rules[41] = new Rule(-20, new int[]{11,-1,12});
    rules[42] = new Rule(-21, new int[]{-2});
    rules[43] = new Rule(-21, new int[]{-3});
    rules[44] = new Rule(-21, new int[]{-21,18,-2});
    rules[45] = new Rule(-21, new int[]{-21,18,-3});
    rules[46] = new Rule(-10, new int[]{17,-21});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{
			CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal);
		}
        break;
      case 4: // stlist -> stlist, statement
{
			ValueStack[ValueStack.Depth-2].blVal.Add(ValueStack[ValueStack.Depth-1].stVal);
			CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal;
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
